#!/bin/bash

# Tally Frontend for Economic Justice Platform
# Simple interface for the tally server on port 8080

SERVER_URL="http://localhost:8080"
TALLY_SERVER="./tally-server"

check_server() {
    # Check if server process is running
    if pgrep -f "tally-server" > /dev/null 2>&1; then
        # Check if server is responding
        if curl -s --connect-timeout 2 "$SERVER_URL/api/tally/status" > /dev/null 2>&1; then
            return 0
        else
            # Server process exists but not responding - might be stuck
            echo "‚ö†Ô∏è  Server process found but not responding - cleaning up..."
            stop_server
            return 1
        fi
    else
        return 1
    fi
}

start_server() {
    if [ -f "$TALLY_SERVER" ]; then
        echo "üöÄ Starting Tally Server in background..."

        # Start server in daemon mode
        $TALLY_SERVER --daemon --port 8080 > server.log 2>&1 &
        SERVER_PID=$!

        # Wait a moment for server to start
        sleep 3

        # Check if server started successfully
        if check_server; then
            echo "‚úÖ Tally Server started successfully! (PID: $SERVER_PID)"
            echo "üåê Access: $SERVER_URL"
            echo "‚ö° Tally API: $SERVER_URL/api/tally/status"
            echo "üìù Logs: server.log"
            return 0
        else
            echo "‚ùå Server failed to start. Check server.log for details."
            return 1
        fi
    else
        echo "‚ùå Tally server binary not found. Run 'make' first."
        return 1
    fi
}

stop_server() {
    echo "üõë Stopping Tally Server..."
    pkill -f "tally-server"
    echo "‚úÖ Server stopped"
    echo "üí° Note: If running in another terminal, use Ctrl+C to stop it"
}

show_status() {
    echo "üìä Current Tally Status:"
    tally_status=$(curl -s "$SERVER_URL/api/tally/status")
    echo "$tally_status" | python3 -m json.tool

    # Show server stats too
    echo ""
    echo "üåê Server Statistics:"
    server_stats=$(curl -s "$SERVER_URL/api/server/stats")
    echo "$server_stats" | python3 -m json.tool

    # Explain what the tallies mean
    echo ""
    echo "üí° Tally Algorithm - The King's Reckoning:"
    echo "   User Tally (1): Your individual sovereignty and decision-making power"
    echo "   Network Tally (1): Collective network power and shared resources"
    echo "   Collective Tally (2): Combined sovereignty for unified action"
    echo ""
    echo "üéØ Algorithm Purpose:"
    echo "   ‚Ä¢ Balance individual autonomy with collective power"
    echo "   ‚Ä¢ Enable democratic resource allocation decisions"
    echo "   ‚Ä¢ Create verifiable economic justice transactions"
    echo ""
    echo "üîÅ Available Sovereignty Actions:"
    echo "   ‚Ä¢ Combine: Merge power for collective economic justice action"
    echo "   ‚Ä¢ Separate: Restore individual control and network autonomy"
}

combine_tallies() {
    echo "‚ö° Combining tallies..."
    response=$(curl -s "$SERVER_URL/api/tally/combine")
    echo "$response" | python3 -m json.tool
}

separate_tallies() {
    echo "üîì Separating tallies..."
    response=$(curl -s "$SERVER_URL/api/tally/separate")
    echo "$response" | python3 -m json.tool
}

show_server_stats() {
    echo "‚öôÔ∏è  Detailed Server Statistics:"
    server_info=$(curl -s "$SERVER_URL/api/server/info")
    echo "$server_info"
}

show_help() {
    echo ""
    echo "‚ùì TALLY NETWORK HELP & EXPLANATION"
    echo "========================================"
    echo "üéØ The King's Reckoning Algorithm:"
    echo "   This system reimagines economic justice through verifiable tally technology"
    echo "   Each participant starts with 1 User Tally representing individual sovereignty"
    echo "   The network maintains 1 Network Tally representing collective resources"
    echo ""
    echo "‚ö° Sovereignty Actions:"
    echo "   ‚Ä¢ Combine: Merge your tally with the network for collective decision-making"
    echo "   ‚Ä¢ Separate: Restore individual control while maintaining network integrity"
    echo ""
    echo "üîê Cryptographic Integrity:"
    echo "   ‚Ä¢ All transactions are cryptographically signed and verified"
    echo "   ‚Ä¢ Tally movements create immutable ledger entries"
    echo "   ‚Ä¢ Network state is transparent and auditable by all participants"
    echo ""
    echo "üåê Economic Justice Goals:"
    echo "   ‚Ä¢ Democratize resource allocation decisions"
    echo "   ‚Ä¢ Balance individual autonomy with collective needs"
    echo "   ‚Ä¢ Create transparent economic relationships"
    echo "   ‚Ä¢ Enable community-driven economic justice initiatives"
    echo "========================================"
}

open_browser() {
    echo "üåê Opening browser..."
    xdg-open "$SERVER_URL" 2>/dev/null || \
    open "$SERVER_URL" 2>/dev/null || \
    echo "Please open: $SERVER_URL"
}

show_menu() {
    echo ""
    echo "========================================"
    echo "        SOVEREIGNTY CONTROL PANEL"
    echo "========================================"
    echo "1. üöÄ  Start Tally Network"
    echo "2. üõë  Stop Tally Network"
    echo "3. üìä  Live Network Status"
    echo "4. ‚ö°  Combine Sovereignty"
    echo "5. üîì  Separate Sovereignty"
    echo "6. üåê  Open Network Portal"
    echo "7. üìñ  Read The King's Reckoning"
    echo "8. üéØ  Economic Justice Resources"
    echo "9. üìñ  Community Story Platform"
    echo "s. ‚öôÔ∏è  Server Statistics"
    echo "h. ‚ùì Help & Algorithm Explanation"
    echo "0. ‚ùå Exit Network"
    echo "========================================"
    echo -n "Choose your action: "
}

main() {
    echo "üåü ECONOMIC JUSTICE TALLY NETWORK"
    echo "========================================"
    echo "üîß Interactive Portal for The King's Reckoning"
    echo "üìñ Reimagining economic sovereignty through secure tally technology"
    echo ""
    echo "üéØ Mission: Balance individual autonomy with collective power"
    echo "üí° Each user holds 1 tally - representing sovereign decision-making"
    echo "üåê The network holds 1 tally - representing shared resources"
    echo "‚ö° Combine for collective action, Separate for individual control"
    echo "========================================"

    # Auto-start server if not running
    if ! check_server; then
        echo "‚ö° Server not detected - attempting to start..."
        if start_server; then
            echo "‚úÖ Server auto-started successfully!"
        else
            echo "‚ùå Failed to auto-start server. Please build it first with 'make'"
            echo "   Then run './tally-server' manually or use option 1 to start"
        fi
    else
        echo "‚úÖ Server is already running!"
    fi

    while true; do
        show_menu
        # Read input - handle both interactive and piped input
        if [ -t 0 ]; then
            # Interactive mode - read from terminal
            read -r choice
        else
            # Piped input mode
            if ! read -r choice; then
                # If no more piped input, exit gracefully
                echo "No more input - exiting"
                exit 0
            fi
        fi

        # Handle empty input or just Enter key
        if [ -z "$choice" ]; then
            echo "‚ùå Please enter a valid option"
            sleep 1
            continue
        fi

        case $choice in
            1)
                start_server
                ;;
            2)
                stop_server
                ;;
            3)
                if check_server; then
                    show_status
                else
                    echo "‚ùå Server not running. Start it first."
                fi
                ;;
            4)
                if check_server; then
                    combine_tallies
                else
                    echo "‚ùå Server not running. Start it first."
                fi
                ;;
            5)
                if check_server; then
                    separate_tallies
                else
                    echo "‚ùå Server not running. Start it first."
                fi
                ;;
            6)
                if check_server; then
                    open_browser
                else
                    echo "‚ùå Server not running. Start it first."
                fi
                ;;
            7)
                if check_server; then
                    xdg-open "$SERVER_URL" 2>/dev/null || open "$SERVER_URL" 2>/dev/null
                else
                    echo "‚ùå Server not running. Start it first."
                fi
                ;;
            8)
                if check_server; then
                    xdg-open "$SERVER_URL/economic-justice-resources.html" 2>/dev/null || open "$SERVER_URL/economic-justice-resources.html" 2>/dev/null
                else
                    echo "‚ùå Server not running. Start it first."
                fi
                ;;
            9)
                if check_server; then
                    xdg-open "$SERVER_URL/story-platform.html" 2>/dev/null || open "$SERVER_URL/story-platform.html" 2>/dev/null
                else
                    echo "‚ùå Server not running. Start it first."
                fi
                ;;
            0)
                echo "üëã Goodbye!"
                exit 0
                ;;
            s|S)
                if check_server; then
                    show_server_stats
                else
                    echo "‚ùå Server not running. Start it first."
                fi
                ;;
            h|H)
                show_help
                ;;
            *)
                echo "‚ùå Invalid option"
                ;;
        esac

        echo ""
        echo "Press Enter to continue..."
        if [ -t 0 ]; then
            read -r
        else
            # In piped mode, just continue without waiting
            sleep 1
        fi
    done
}

# Run main function
main